package main

import (
	"html/template"
	"log" //nolint:revive
	"os"
	"time"

	"github.com/gomarkdown/markdown"
	"github.com/gomarkdown/markdown/ast"
	"github.com/gomarkdown/markdown/parser"
)

type PluginData struct {
	SampleConfig string
	Description  string
}

func extractPluginData() (PluginData, error) {
	readMe, err := os.ReadFile("README.md")
	if err != nil {
		return PluginData{}, err
	}
	extensions := parser.CommonExtensions | parser.AutoHeadingIDs
	mdParser := parser.NewWithExtensions(extensions)
	md := markdown.Parse(readMe, mdParser)

	var p PluginData
	descriptionHeader := "short-description"
	configHeader := "configuration"
	var currentSection string

	for _, t := range md.GetChildren() {
		switch tok := t.(type) {
		case *ast.Heading:
			currentSection = tok.HeadingID
		case *ast.CodeBlock:
			if currentSection == configHeader && string(tok.Info) == "toml" {
				p.SampleConfig = string(tok.Literal)
			}
		case *ast.Paragraph:
			if currentSection != descriptionHeader {
				continue
			}
			for _, c := range tok.Children {
				if text, ok := c.(*ast.Text); ok {
					p.Description = string(text.Literal)
				}
			}
		}
	}

	return p, nil
}

func generatePluginData(p PluginData) error {
	generatedTemplate := template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT; DO NOT COMMIT.
// This file was generated by robots at
// {{ .Timestamp }}
package {{ .GOPACKAGE }}

func (c *CPUStats) LoadGeneratedData() {
	c.sampleConfig = ` + "`{{ .SampleConfig }}`" + `
	c.description = "{{ .Description }}"
}
`))

	goPackage := os.Getenv("GOPACKAGE")

	f, err := os.Create("plugindata.go")
	if err != nil {
		return err
	}
	defer f.Close()

	err = generatedTemplate.Execute(f, struct {
		Timestamp    time.Time
		GOPACKAGE    string
		SampleConfig string
		Description  string
	}{
		Timestamp:    time.Now(),
		GOPACKAGE:    goPackage,
		SampleConfig: p.SampleConfig,
		Description:  p.Description,
	})
	if err != nil {
		return err
	}

	return nil
}

func main() {
	p, err := extractPluginData()
	if err != nil {
		log.Fatal(err)
	}

	err = generatePluginData(p)
	if err != nil {
		log.Fatal(err)
	}
}
